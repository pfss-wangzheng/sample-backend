/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.64).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.pfss.api;

import com.pfss.model.User;
import com.pfss.model.UserResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.CrossOrigin;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;


@Validated
@CrossOrigin
public interface UsersApi {

    @Operation(summary = "Create a new lnb user", description = "Create a new lnb user into LNB system", tags={ "User" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "The user was successfully created", content = @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad request (e.g., invalid input)"),
        
        @ApiResponse(responseCode = "500", description = "Internal server error") })
    @RequestMapping(value = "/users/create",
        produces = { "application/json" }, 
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }, 
        method = RequestMethod.POST)
    ResponseEntity<UserResponse> createUser(@Parameter(in = ParameterIn.DEFAULT, description = "Created user object", schema=@Schema()) @Valid @RequestBody User body
);


    @Operation(summary = "Delete existing lnb user", description = "Delete existing lnb user from system by id", tags={ "User" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "400", description = "Invalid user name") })
    @RequestMapping(value = "/users/delete/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteUser(@Parameter(in = ParameterIn.PATH, description = "ID of user", required=true, schema=@Schema()) @PathVariable("id") Long id
);


    @Operation(summary = "Get all lnb users", description = "Get all lnb users infomation", tags={ "User" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "get user success", content = @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))) })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<User> getAllUsersInfo();


    @Operation(summary = "Upate existing lnb user", description = "Upate existing lnb user into LNB system", tags={ "User" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid userinfo"),
        
        @ApiResponse(responseCode = "404", description = "User not found") })
    @RequestMapping(value = "/users/update",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<User> updateUser(@Parameter(in = ParameterIn.DEFAULT, description = "Update user object", schema=@Schema()) @Valid @RequestBody User body
);

}

